{"version":3,"file":"main.bundle.js","mappings":";;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACjBqC;AACrC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA,sBAAsB,qBAAqB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACvGkC;AAClC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;;AC9CkD;AACd;AACpC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,gBAAgB,uBAAuB;AACvC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sBAAsB;AAC9B;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD,yBAAyB,QAAQ;AACjC,wBAAwB,OAAO;AAC/B;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC3N4B;AAC5B;AACkC;AAClC;AACA,gBAAgB,GAAG;AACnB","sources":["webpack://cellular-automata/./src/utils.js","webpack://cellular-automata/./src/automata.js","webpack://cellular-automata/./src/display.js","webpack://cellular-automata/./src/app.js","webpack://cellular-automata/./src/index.js"],"sourcesContent":["export function shuffle(array) {\r\n  let m = array.length;\r\n  let t;\r\n  let i;\r\n\r\n  // While there remain elements to shuffle…\r\n  while (m) {\r\n    // Pick a remaining element…\r\n    i = Math.floor(Math.random() * m--);\r\n\r\n    // And swap it with the current element.\r\n    t = array[m];\r\n    array[m] = array[i];\r\n    array[i] = t;\r\n  }\r\n\r\n  return array;\r\n}\r\n","import { shuffle } from \"./utils.js\";\r\n\r\nexport const InputStyle = {\r\n  centerDot: \"center-dot\",\r\n  even: \"even\",\r\n  shuffleEven: \"shuffle-even\",\r\n  random: \"random\",\r\n};\r\n\r\nexport class Automata {\r\n  constructor(conf) {\r\n    if (conf.base < 2 || 8 < conf.base) {\r\n      throw \"Invalid Input\";\r\n    }\r\n    const rulesCount = Math.pow(conf.base, conf.inputCells);\r\n    if (Math.pow(conf.base, rulesCount) < conf.ruleId) {\r\n      throw \"Invalid Input\";\r\n    }\r\n    const rulesArray = new Array(rulesCount);\r\n    let convert = conf.ruleId;\r\n    for (let i = 0; i < rulesCount; i++) {\r\n      rulesArray[i] = convert % conf.base;\r\n      convert = parseInt(convert / conf.base);\r\n    }\r\n\r\n    this.base = conf.base;\r\n    this.inputCells = conf.inputCells;\r\n    this.rules = rulesArray;\r\n  }\r\n\r\n  invoke(input) {\r\n    const size = input.length;\r\n    const output = new Array(size);\r\n    for (let i = 0; i < size; i++) {\r\n      let ruleId = 0;\r\n      for (let j = 0; j < this.inputCells; j++) {\r\n        let inputIndex = i + j - parseInt(this.inputCells / 2);\r\n        if (inputIndex < 0) {\r\n          inputIndex = size + inputIndex;\r\n        }\r\n        if (size <= inputIndex) {\r\n          inputIndex = inputIndex - size;\r\n        }\r\n        ruleId = ruleId * this.base + input[inputIndex];\r\n      }\r\n      output[i] = this.rules[ruleId];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  getInputRow(inputType, size) {\r\n    size = parseInt(size);\r\n\r\n    const centerDot = () => {\r\n      const result = new Array(size).fill(0);\r\n      result[parseInt(size / 2)] = 1;\r\n      return result;\r\n    };\r\n\r\n    const even = () => {\r\n      let result = [];\r\n      let baseLeft = this.base;\r\n      let sizeLeft = size;\r\n      while (0 < baseLeft) {\r\n        const tmpSize = parseInt(sizeLeft / baseLeft);\r\n        baseLeft--;\r\n        result = result.concat(new Array(tmpSize).fill(baseLeft));\r\n        sizeLeft -= tmpSize;\r\n      }\r\n      return result;\r\n    };\r\n\r\n    const shuffleEven = () => {\r\n      return shuffle(even());\r\n    };\r\n\r\n    const random = () => {\r\n      const result = new Array(size).fill(0);\r\n      for (let i = 0; i < size; i++) {\r\n        result[i] = Math.floor(Math.random() * this.base);\r\n      }\r\n      return result;\r\n    };\r\n\r\n    switch (inputType) {\r\n      case InputStyle.centerDot:\r\n        return centerDot();\r\n      case InputStyle.even:\r\n        return even();\r\n      case InputStyle.shuffleEven:\r\n        return shuffleEven();\r\n      default:\r\n        return random();\r\n    }\r\n  }\r\n\r\n  static getRandomRule(conf) {\r\n    return Math.floor(Math.random() * Automata.getRulesCount(conf));\r\n  }\r\n\r\n  static getRulesCount(conf) {\r\n    return Math.pow(conf.base, Math.pow(conf.base, conf.inputCells));\r\n  }\r\n}\r\n","import { shuffle } from \"./utils\";\r\n\r\nexport class Display {\r\n  constructor(conf) {\r\n    this.size = conf.size;\r\n    this.zoom = conf.zoom;\r\n    this.colors = conf.colors;\r\n\r\n    this.canvas = document.getElementById(\"canvas\");\r\n    this.canvas.height = this.size * this.zoom;\r\n    this.canvas.width = this.size * this.zoom;\r\n    this.context = this.canvas.getContext(\"2d\");\r\n  }\r\n\r\n  drawRow(rowIndex, row) {\r\n    const y = rowIndex * this.zoom;\r\n    for (let i = 0; i < row.length; i++) {\r\n      const x = i * this.zoom;\r\n      this.context.fillStyle = this.colors[row[i]];\r\n      this.context.fillRect(x, y, this.zoom, this.zoom);\r\n    }\r\n  }\r\n\r\n  shiftUp(rowsCount) {\r\n    const imageData = this.context.getImageData(\r\n      0,\r\n      rowsCount * this.zoom,\r\n      this.canvas.height,\r\n      this.canvas.width\r\n    );\r\n    this.context.putImageData(imageData, 0, 0);\r\n  }\r\n\r\n  static getRandomColors() {\r\n    const colors = [\r\n      \"#FAFAFA\", // black\r\n      \"#212121\", // white\r\n      \"#F44336\", // red\r\n      \"#4CAF50\", // green\r\n      \"#2196F3\", // blue\r\n      \"#FFEB3B\", // yellow\r\n      \"#9C27B0\", // purple\r\n      \"#00BCD4\", // cyan\r\n    ];\r\n    return shuffle(colors);\r\n  }\r\n}\r\n","import { Automata, InputStyle } from \"./automata\";\r\nimport { Display } from \"./display\";\r\n\r\nexport class App {\r\n  constructor() {\r\n    const settingsForm = document.getElementById(\"settings-form\");\r\n\r\n    const changeField = (obj, field, value) => {\r\n      if (obj[field] === value) {\r\n        return false;\r\n      }\r\n\r\n      obj[field] = value;\r\n      return true;\r\n    };\r\n\r\n    const changeForm = (form, element, value, select, set) => {\r\n      if (!select) {\r\n        select = (element) => {\r\n          element.value;\r\n        };\r\n      }\r\n\r\n      if (!set) {\r\n        set = (element, value) => {\r\n          element.value = value;\r\n        };\r\n      }\r\n\r\n      const elementValue = select(form.elements[element]);\r\n      if (elementValue === value) {\r\n        return false;\r\n      }\r\n\r\n      set(form.elements[element], value);\r\n    };\r\n\r\n    this.config = {\r\n      automata: {\r\n        setInputCells: (value) => {\r\n          if (changeField(this.config.automata, \"inputCells\", value)) {\r\n            changeForm(\r\n              settingsForm,\r\n              \"rule-id\",\r\n              Automata.getRulesCount(this.config.automata),\r\n              (element) => element.getAttribute(\"max\"),\r\n              (element, value) => element.setAttribute(\"max\", value)\r\n            );\r\n          }\r\n\r\n          changeForm(settingsForm, \"input-cells\", value);\r\n        },\r\n\r\n        setBase: (value) => {\r\n          if (changeField(this.config.automata, \"base\", value)) {\r\n            changeForm(\r\n              settingsForm,\r\n              \"rule-id\",\r\n              Automata.getRulesCount(this.config.automata),\r\n              (element) => element.getAttribute(\"max\"),\r\n              (element, value) => element.setAttribute(\"max\", value)\r\n            );\r\n            this.config.setRandomRule(true);\r\n          }\r\n\r\n          changeForm(settingsForm, \"base\", value);\r\n        },\r\n\r\n        setRuleId: (value) => {\r\n          changeField(this.config.automata, \"ruleId\", value);\r\n          changeForm(settingsForm, \"rule-id\", value);\r\n        },\r\n      },\r\n\r\n      display: {\r\n        setSize: (value) => {\r\n          changeField(this.config.display, \"size\", value);\r\n          changeForm(settingsForm, \"size\", value);\r\n        },\r\n        setZoom: (value) => {\r\n          changeField(this.config.display, \"zoom\", value);\r\n          changeForm(settingsForm, \"zoom\", value);\r\n        },\r\n        colors: Display.getRandomColors(),\r\n      },\r\n\r\n      setRandomRule: (value) => {\r\n        changeField(this.config, \"randomRule\", value);\r\n        changeForm(\r\n          settingsForm,\r\n          \"random-rule\",\r\n          value,\r\n          (element) => element.checked,\r\n          (element, value) => (element.checked = value)\r\n        );\r\n        changeForm(\r\n          settingsForm,\r\n          \"rule-id\",\r\n          value,\r\n          (element) => element.disabled,\r\n          (element, value) => (element.disabled = value)\r\n        );\r\n      },\r\n\r\n      setInputStyle: (value) => {\r\n        changeField(this.config, \"inputStyle\", value);\r\n        changeForm(settingsForm, \"input-style\", value);\r\n      },\r\n\r\n      setEnableScroll: (value) => {\r\n        changeField(this.config, \"enableScroll\", value);\r\n        changeForm(\r\n          settingsForm,\r\n          \"enable-scroll\",\r\n          value,\r\n          (element) => element.checked,\r\n          (element, value) => (element.checked = value)\r\n        );\r\n      },\r\n    };\r\n\r\n    // Init select\r\n    const inputStyleSelect = settingsForm.elements[\"input-style\"];\r\n    Object.entries(InputStyle).forEach(([_, value]) => {\r\n      const option = document.createElement(\"option\");\r\n      option.value = value;\r\n      option.innerHTML = value;\r\n      inputStyleSelect.appendChild(option);\r\n    });\r\n\r\n    // Default config\r\n    this.config.automata.setBase(3);\r\n    this.config.automata.setInputCells(3);\r\n    this.config.display.setSize(360);\r\n    this.config.display.setZoom(2);\r\n    this.config.setRandomRule(true);\r\n    this.config.setInputStyle(InputStyle.shuffleEven);\r\n    this.config.setEnableScroll(false);\r\n\r\n    settingsForm.addEventListener(\"change\", () => {\r\n      this.config.automata.setBase(settingsForm.elements[\"base\"].value);\r\n      this.config.automata.setInputCells(\r\n        settingsForm.elements[\"input-cells\"].value\r\n      );\r\n      this.config.automata.setRuleId(settingsForm.elements[\"rule-id\"].value);\r\n\r\n      this.config.display.setSize(settingsForm.elements[\"size\"].value);\r\n      this.config.display.setZoom(settingsForm.elements[\"zoom\"].value);\r\n\r\n      this.config.setRandomRule(settingsForm.elements[\"random-rule\"].checked);\r\n      this.config.setInputStyle(settingsForm.elements[\"input-style\"].value);\r\n      this.config.setEnableScroll(\r\n        settingsForm.elements[\"enable-scroll\"].checked\r\n      );\r\n    });\r\n\r\n    this.generate();\r\n  }\r\n\r\n  generate() {\r\n    if (this.scrollAnimation) {\r\n      cancelAnimationFrame(this.scrollAnimation);\r\n    }\r\n\r\n    if (this.config.randomRule) {\r\n      this.config.automata.setRuleId(\r\n        Automata.getRandomRule(this.config.automata)\r\n      );\r\n    }\r\n\r\n    this.config.display.colors = Display.getRandomColors();\r\n    const automata = new Automata(this.config.automata);\r\n    const display = new Display(this.config.display);\r\n    if (this.config.enableScroll) {\r\n      this.scrollGenerate(automata, display);\r\n    } else {\r\n      this.instantGenerate(automata, display);\r\n    }\r\n  }\r\n\r\n  instantGenerate(automata, display) {\r\n    let row = automata.getInputRow(\r\n      this.config.inputStyle,\r\n      this.config.display.size\r\n    );\r\n    display.drawRow(0, row);\r\n    for (let i = 1; i < this.config.display.size; i++) {\r\n      row = automata.invoke(row);\r\n      display.drawRow(i, row);\r\n    }\r\n  }\r\n\r\n  scrollGenerate(automata, display) {\r\n    let row = automata.getInputRow(\r\n      this.config.inputStyle,\r\n      this.config.display.size\r\n    );\r\n    display.drawRow(0, row);\r\n\r\n    let rowIndex = 0;\r\n    const scroll = () => {\r\n      if (rowIndex < this.config.display.size - 1) {\r\n        rowIndex++;\r\n      } else {\r\n        display.shiftUp(1);\r\n      }\r\n      row = automata.invoke(row);\r\n      display.drawRow(rowIndex, row);\r\n\r\n      this.scrollAnimation = requestAnimationFrame(scroll);\r\n    };\r\n\r\n    scroll();\r\n  }\r\n\r\n  handleToggleSettings() {\r\n    const settingsSection = document.getElementById(\"settings\");\r\n    settingsSection.classList.toggle(\"d-n-i\");\r\n  }\r\n}\r\n","import { App } from \"./app\";\r\n// eslint-disable-next-line no-unused-vars -- import global styles\r\nimport styles from \"./styles.css\";\r\n\r\nconst app = new App();\r\nwindow.app = app;\r\n"],"names":[],"sourceRoot":""}